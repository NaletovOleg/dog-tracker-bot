# dog_tracker_bot.py
import os
import csv
import math
import logging
import sqlite3
import threading
from datetime import datetime, timedelta
from typing import List, Tuple

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackContext,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Ñ–∏–≥
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–¥–∞—Ç—å –≤ Render ‚Üí Environment
DB_FILE = os.getenv("DB_PATH", "dog_tracker.db")  # –Ω–∞ Free –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç, –Ω–æ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ redeploy

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–Ω–æ–ø–∫–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BTN_WALK_START = "–ü—Ä–æ–≥—É–ª–∫–∞ üêæ"
BTN_WALK_END   = "–ü—Ä–æ–≥—É–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚è±"
BTN_PEE        = "–õ—É–∂–∞ üö∞"
BTN_POO        = "–ö—É—á–∫–∞ üí©"
BTN_PEE_HOME   = "–õ—É–∂–∞ –¥–æ–º–∞ üö®"
BTN_POO_HOME   = "–ö—É—á–∫–∞ –¥–æ–º–∞ üö®"
BTN_FEED       = "–ü–æ–∫–æ—Ä–º–∏–ª üçñ"
BTN_DAY        = "–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è üìÖ"
BTN_REG        = "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚è±Ô∏è"
BTN_EXPORT     = "–≠–∫—Å–ø–æ—Ä—Ç CSV üì§"
BTN_RESET      = "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üßπ"
BTN_CLOSE      = "‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [BTN_WALK_START, BTN_WALK_END],
        [BTN_PEE, BTN_POO],
        [BTN_PEE_HOME, BTN_POO_HOME],
        [BTN_FEED],
        [BTN_DAY, BTN_REG],
        [BTN_EXPORT, BTN_RESET],
        [BTN_CLOSE],
    ],
    resize_keyboard=True,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def db_conn():
    return sqlite3.connect(DB_FILE)

def init_db():
    with db_conn() as conn:
        conn.execute(
            """CREATE TABLE IF NOT EXISTS events(
                id   INTEGER PRIMARY KEY AUTOINCREMENT,
                ts   TEXT    NOT NULL,
                type TEXT    NOT NULL,
                user TEXT    NOT NULL
            )"""
        )

def log_event(ev_type: str, user: str):
    with db_conn() as conn:
        conn.execute(
            "INSERT INTO events(ts, type, user) VALUES (?,?,?)",
            (datetime.now().isoformat(timespec="seconds"), ev_type, user),
        )

def load_today() -> list[tuple[datetime, str, str]]:
    start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    with db_conn() as conn:
        cur = conn.execute(
            "SELECT ts, type, user FROM events WHERE ts >= ? ORDER BY ts ASC",
            (start.isoformat(),),
        )
        rows = [(datetime.fromisoformat(ts), t, u) for ts, t, u in cur.fetchall()]
    return rows

def load_last_days(days: int) -> list[tuple[datetime, str, str]]:
    since = datetime.now() - timedelta(days=days)
    with db_conn() as conn:
        cur = conn.execute(
            "SELECT ts, type, user FROM events WHERE ts >= ? ORDER BY ts ASC",
            (since.isoformat(),),
        )
        rows = [(datetime.fromisoformat(ts), t, u) for ts, t, u in cur.fetchall()]
    return rows

def reset_all():
    with db_conn() as conn:
        conn.execute("DELETE FROM events")

init_db()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def emsg(update: Update):
    return update.effective_message

def euser(update: Update):
    return update.effective_user

def pair_walks(events_today: list[tuple[datetime, str, str]]) -> List[Tuple[datetime, datetime]]:
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞—Ä—ã —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É."""
    starts = [ts for ts, tp, _ in events_today if tp == BTN_WALK_START]
    ends   = [ts for ts, tp, _ in events_today if tp == BTN_WALK_END]
    pairs = []
    i = j = 0
    while i < len(starts) and j < len(ends):
        if ends[j] > starts[i]:
            pairs.append((starts[i], ends[j]))
            i += 1; j += 1
        else:
            j += 1
    return pairs

def timestr_list(dts: List[datetime]) -> str:
    if not dts:
        return "‚Äî"
    return ", ".join(dt.strftime("%H:%M") for dt in dts)

def mean_std_minutes(times: List[datetime.time]) -> tuple[str, int, int]:
    """–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è HH:MM –∏ œÉ –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ time()."""
    if not times:
        return "‚Äî", 0, 0
    mins = [t.hour * 60 + t.minute for t in times]
    avg = sum(mins) / len(mins)
    var = sum((x - avg) ** 2 for x in mins) / len(mins)
    std = int(math.sqrt(var) + 0.5)
    h, m = divmod(int(avg + 0.5), 60)
    return f"{h:02d}:{m:02d}", std, len(mins)

def export_csv(path: str):
    with db_conn() as conn, open(path, "w", newline="", encoding="utf-8") as f:
        cur = conn.execute("SELECT ts, type, user FROM events ORDER BY ts ASC")
        w = csv.writer(f)
        w.writerow(["timestamp", "event", "user"])
        w.writerows(cur.fetchall())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = emsg(update)
    if not m:
        return
    await m.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üê∂ –Ø –±–æ—Ç-—Ñ–∏–∫—Å–∞—Ç–æ—Ä.\n"
        "‚Ä¢ ¬´–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è¬ª ‚Äî –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≥—É–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–æ–±—ã—Ç–∏—è.\n"
        "‚Ä¢ ¬´–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å¬ª ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–∑–±—Ä–æ—Å –∑–∞ 14 –¥–Ω–µ–π (–ª—É–∂–∏/–∫—É—á–∫–∏).\n"
        "‚Ä¢ ¬´–≠–∫—Å–ø–æ—Ä—Ç CSV¬ª ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.\n"
        "‚Ä¢ ¬´–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª ‚Äî –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã.\n",
        reply_markup=MAIN_KB,
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = emsg(update)
    if not m or not m.text:
        return
    text = m.text.strip()
    u = euser(update)
    username = (u.first_name or "user") if u else "user"

    # –≠–∫—Å–ø–æ—Ä—Ç
    if text == BTN_EXPORT:
        tmp_path = "/tmp/dog_events.csv"
        export_csv(tmp_path)
        if os.path.exists(tmp_path) and os.path.getsize(tmp_path) > 0:
            await m.reply_document(open(tmp_path, "rb"))
        else:
            await m.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –°–±—Ä–æ—Å
    if text == BTN_RESET:
        reset_all()
        await m.reply_text("üßπ –ì–æ—Ç–æ–≤–æ. –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=MAIN_KB)
        return

    # –ó–∞–∫—Ä—ã—Ç—å
    if text == BTN_CLOSE:
        await m.reply_text("–û–∫. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.", reply_markup=MAIN_KB)
        return

    # –ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è
    if text == BTN_DAY:
        evs = load_today()
        if not evs:
            await m.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π üêæ")
            return

        pairs = pair_walks(evs)
        total_minutes = sum(max(0, int((e - s).total_seconds() // 60)) for s, e in pairs)

        pee_times = [ts for ts, tp, _ in evs if tp == BTN_PEE]
        poo_times = [ts for ts, tp, _ in evs if tp == BTN_POO]
        feed_times = [ts for ts, tp, _ in evs if tp == BTN_FEED]
        home_inc = [ts for ts, tp, _ in evs if tp in (BTN_PEE_HOME, BTN_POO_HOME)]

        today = datetime.now().strftime("%d.%m")
        msg = [
            f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today})",
            f"‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏: {total_minutes} –º–∏–Ω ({len(pairs)} —à—Ç)",
            f"‚Ä¢ –õ—É–∂–∏: {timestr_list(pee_times)}",
            f"‚Ä¢ –ö—É—á–∫–∏: {timestr_list(poo_times)}",
            f"‚Ä¢ –ö–æ—Ä–º–ª–µ–Ω–∏—è: {timestr_list(feed_times)}",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: {len(home_inc)}",
        ]
        await m.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å 14 –¥–Ω–µ–π
    if text == BTN_REG:
        evs = load_last_days(14)
        if not evs:
            await m.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 14 –¥–Ω–µ–π üìâ")
            return

        pee_list = [ts.time() for ts, tp, _ in evs if tp == BTN_PEE]
        poo_list = [ts.time() for ts, tp, _ in evs if tp == BTN_POO]
        pee_home = [1 for _, tp, _ in evs if tp == BTN_PEE_HOME]
        poo_home = [1 for _, tp, _ in evs if tp == BTN_POO_HOME]

        pee_avg, pee_std, pee_n = mean_std_minutes(pee_list)
        poo_avg, poo_std, poo_n = mean_std_minutes(poo_list)

        msg = [
            "‚è±Ô∏è –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (14 –¥–Ω–µ–π)",
            f"‚Ä¢ –õ—É–∂–∏: —Å—Ä–µ–¥–Ω–µ–µ {pee_avg} ¬±{pee_std} –º–∏–Ω (n={pee_n})",
            f"‚Ä¢ –ö—É—á–∫–∏: —Å—Ä–µ–¥–Ω–µ–µ {poo_avg} ¬±{poo_std} –º–∏–Ω (n={poo_n})",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: –ª—É–∂–∏ {sum(pee_home)}, –∫—É—á–∫–∏ {sum(poo_home)}",
        ]
        await m.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –ö–Ω–æ–ø–∫–∏-—Ñ–∏–∫—Å–∞—Ü–∏–∏
    if text in {BTN_WALK_START, BTN_WALK_END, BTN_PEE, BTN_POO, BTN_PEE_HOME, BTN_POO_HOME, BTN_FEED}:
        log_event(text, username)
        await m.reply_text(f"‚úÖ {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=MAIN_KB)
        return

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –∏–≥–Ω–æ—Ä/–ø–æ–¥—Å–∫–∞–∑–∫–∞
    await m.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /start.", reply_markup=MAIN_KB)

# –û—à–∏–±–∫–∏
async def on_error(update: object, context: CallbackContext):
    logging.exception("Unhandled error: %s", context.error)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Telegram Application
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_tg_app() -> Application:
    if not BOT_TOKEN:
        raise SystemExit("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(on_error)
    return app

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render Free
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
flask_app = Flask(__name__)

@flask_app.get("/")
def root():
    return "Dog tracker bot is running ‚úÖ"

@flask_app.get("/healthz")
def healthz():
    return "ok"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port, threaded=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    # 1) HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ ‚Äî —á—Ç–æ–±—ã Render Free –¥–µ—Ä–∂–∞–ª —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    threading.Thread(target=run_flask, daemon=True).start()

    # 2) Telegram-–±–æ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ; —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    app = build_tg_app()
    app.run_polling(
        drop_pending_updates=True,           # –ª–µ—á–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —á—É–∂–∏–º polling/webhook
        allowed_updates=Update.ALL_TYPES,    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
    )

if __name__ == "__main__":
    main()
