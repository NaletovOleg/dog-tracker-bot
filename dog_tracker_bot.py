# dog_tracker_bot.py
import os
import csv
import datetime as dt
from typing import List, Tuple
import threading

import pandas as pd
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "dog_events.csv")  # –Ω–∞ Free-–¥–µ–ø–ª–æ–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç, –Ω–æ –ø—Ä–æ–ø–∞–¥—ë—Ç –ø—Ä–∏ redeploy

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê ======
KEY_WALK_START = "–ü—Ä–æ–≥—É–ª–∫–∞ üêæ"
KEY_WALK_END   = "–ü—Ä–æ–≥—É–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚è±"
KEY_PEE        = "–õ—É–∂–∞ üö∞"
KEY_POO        = "–ö—É—á–∫–∞ üí©"
KEY_PEE_HOME   = "–õ—É–∂–∞ –¥–æ–º–∞ üö®"
KEY_POO_HOME   = "–ö—É—á–∫–∞ –¥–æ–º–∞ üö®"
KEY_FEED       = "–ü–æ–∫–æ—Ä–º–∏–ª üçñ"
KEY_DAY        = "–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è üìÖ"
KEY_REG        = "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚è±Ô∏è"
KEY_EXPORT     = "–≠–∫—Å–ø–æ—Ä—Ç CSV üì§"
KEY_RESET      = "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üßπ"
KEY_CLOSE      = "‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KEY_WALK_START, KEY_WALK_END],
        [KEY_PEE, KEY_POO],
        [KEY_PEE_HOME, KEY_POO_HOME],
        [KEY_FEED],
        [KEY_DAY, KEY_REG],
        [KEY_EXPORT, KEY_RESET],
        [KEY_CLOSE],
    ],
    resize_keyboard=True,
)

# ====== –£–¢–ò–õ–ò–¢–´ ======
def now_str() -> str:
    return dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def ensure_csv_headers(path: str):
    if not os.path.exists(path) or os.path.getsize(path) == 0:
        with open(path, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow(["timestamp", "event", "user"])

def log_event(event_type: str, user: str):
    ensure_csv_headers(DB_PATH)
    with open(DB_PATH, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([now_str(), event_type, user])

def load_df() -> pd.DataFrame:
    if not os.path.exists(DB_PATH) or os.path.getsize(DB_PATH) == 0:
        return pd.DataFrame(columns=["timestamp", "event", "user"])
    df = pd.read_csv(DB_PATH)
    if df.empty:
        return pd.DataFrame(columns=["timestamp", "event", "user"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    df = df.dropna(subset=["timestamp"]).sort_values("timestamp").reset_index(drop=True)
    for col in ["event", "user"]:
        if col in df.columns:
            df[col] = df[col].astype(str)
        else:
            df[col] = ""
    return df

def pair_walks_today(df_today: pd.DataFrame):
    starts = df_today[df_today["event"] == KEY_WALK_START]["timestamp"].tolist()
    ends   = df_today[df_today["event"] == KEY_WALK_END]["timestamp"].tolist()
    pairs = []
    i = j = 0
    while i < len(starts) and j < len(ends):
        if ends[j] > starts[i]:
            pairs.append((starts[i], ends[j]))
            i += 1; j += 1
        else:
            j += 1
    return pairs

def format_times(series: pd.Series) -> str:
    if series.empty:
        return "‚Äî"
    return ", ".join(pd.to_datetime(series).dt.strftime("%H:%M").tolist())

def mean_and_sigma_minutes(times: List[dt.time]):
    if not times:
        return "‚Äî", 0, 0
    minutes = [t.hour * 60 + t.minute for t in times]
    avg = sum(minutes) / len(minutes)
    sigma = (sum((m - avg) ** 2 for m in minutes) / len(minutes)) ** 0.5
    h, m = divmod(int(avg + 0.5), 60)
    return f"{h:02d}:{m:02d}", int(sigma), len(times)

# ====== TELEGRAM –•–ï–ù–î–õ–ï–†–´ ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üê∂ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
        "¬´–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è¬ª –ø–æ–∫–∞–∂–µ—Ç –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≥—É–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è,\n"
        "¬´–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å¬ª ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–∑–±—Ä–æ—Å –∑–∞ 14 –¥–Ω–µ–π.\n"
        "–ö–Ω–æ–ø–∫–∞ ¬´–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏.",
        reply_markup=MAIN_KB,
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = (update.message.from_user.first_name or "").strip() or "user"
    text = (update.message.text or "").strip()

    # –≠–∫—Å–ø–æ—Ä—Ç
    if text == KEY_EXPORT:
        if os.path.exists(DB_PATH) and os.path.getsize(DB_PATH) > 0:
            await update.message.reply_document(open(DB_PATH, "rb"))
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if text == KEY_RESET:
        try:
            if os.path.exists(DB_PATH):
                os.remove(DB_PATH)
            ensure_csv_headers(DB_PATH)
            await update.message.reply_text("üßπ –ì–æ—Ç–æ–≤–æ. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=MAIN_KB)
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å: {e}", reply_markup=MAIN_KB)
        return

    # –ó–∞–∫—Ä—ã—Ç—å
    if text == KEY_CLOSE:
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å.")
        return

    # –ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è
    if text == KEY_DAY:
        df = load_df()
        today = pd.Timestamp.now().date()
        df_today = df[df["timestamp"].dt.date == today]
        if df_today.empty:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π üê∂")
            return
        pairs = pair_walks_today(df_today)
        total_minutes = sum(max(0, int((e - s).total_seconds() // 60)) for s, e in pairs)

        pee_times = df_today[df_today["event"] == KEY_PEE]["timestamp"]
        poo_times = df_today[df_today["event"] == KEY_POO]["timestamp"]
        feed_times = df_today[df_today["event"] == KEY_FEED]["timestamp"]
        home_inc = df_today[df_today["event"].isin([KEY_PEE_HOME, KEY_POO_HOME])]

        msg = [
            f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')}):",
            f"‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏: {total_minutes} –º–∏–Ω ({len(pairs)} —à—Ç)",
            f"‚Ä¢ –õ—É–∂–∏: {format_times(pee_times)}",
            f"‚Ä¢ –ö—É—á–∫–∏: {format_times(poo_times)}",
            f"‚Ä¢ –ö–æ—Ä–º–ª–µ–Ω–∏—è: {format_times(feed_times)}",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: {0 if home_inc.empty else len(home_inc)}",
        ]
        await update.message.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
    if text == KEY_REG:
        df = load_df()
        if df.empty:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        since = (pd.Timestamp.now() - pd.Timedelta(days=14)).date()
        df14 = df[df["timestamp"].dt.date >= since]
        if df14.empty:
            await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
            return

        pee_list = [t.time() for t in df14[df14["event"] == KEY_PEE]["timestamp"].tolist()]
        poo_list = [t.time() for t in df14[df14["event"] == KEY_POO]["timestamp"].tolist()]
        pee_home = df14[df14["event"] == KEY_PEE_HOME]
        poo_home = df14[df14["event"] == KEY_POO_HOME]

        pee_avg, pee_sigma, pee_n = mean_and_sigma_minutes(pee_list)
        poo_avg, poo_sigma, poo_n = mean_and_sigma_minutes(poo_list)

        msg = [
            "‚è±Ô∏è –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (14 –¥–Ω–µ–π)",
            "",
            f"‚Ä¢ –õ—É–∂–∏: —Å—Ä–µ–¥–Ω–µ–µ {pee_avg} ¬±{pee_sigma} –º–∏–Ω (n={pee_n})",
            f"‚Ä¢ –ö—É—á–∫–∏: —Å—Ä–µ–¥–Ω–µ–µ {poo_avg} ¬±{poo_sigma} –º–∏–Ω (n={poo_n})",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: –ª—É–∂–∏ {len(pee_home)}, –∫—É—á–∫–∏ {len(poo_home)}",
        ]
        await update.message.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –ª–æ–≥
    if text in {KEY_WALK_START, KEY_WALK_END, KEY_PEE, KEY_POO, KEY_PEE_HOME, KEY_POO_HOME, KEY_FEED}:
        log_event(text, user)
        await update.message.reply_text(f"‚úÖ {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=MAIN_KB)
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /start.", reply_markup=MAIN_KB)

# ====== TELEGRAM APP ======
def build_app() -> Application:
    if not BOT_TOKEN:
        raise SystemExit("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (—Ç–æ–∫–µ–Ω –æ—Ç @BotFather).")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def start_polling():
    tg_app = build_app()
    # run_polling –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º
    tg_app.run_polling(close_loop=False)

# ====== FLASK (HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render Web Service Free) ======
flask_app = Flask(__name__)

@flask_app.get("/")
def root():
    return "Dog tracker bot is running ‚úÖ"

@flask_app.get("/healthz")
def health():
    return "ok"

if __name__ == "__main__":
    # 1) –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    t = threading.Thread(target=start_polling, daemon=True)
    t.start()

    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render Free –¥–µ—Ä–∂–∞–ª —Å–µ—Ä–≤–∏—Å –∂–∏–≤—ã–º
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)
