# dog_tracker_bot.py
import os
import csv
import datetime as dt
from typing import List, Tuple

import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
DB_PATH = os.getenv("DB_PATH", "dog_events.csv")
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
KEY_WALK_START = "–ü—Ä–æ–≥—É–ª–∫–∞ üêæ"
KEY_WALK_END = "–ü—Ä–æ–≥—É–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚è±"
KEY_PEE = "–õ—É–∂–∞ üö∞"
KEY_POO = "–ö—É—á–∫–∞ üí©"
KEY_PEE_HOME = "–õ—É–∂–∞ –¥–æ–º–∞ üö®"
KEY_POO_HOME = "–ö—É—á–∫–∞ –¥–æ–º–∞ üö®"
KEY_FEED = "–ü–æ–∫–æ—Ä–º–∏–ª üçñ"
KEY_DAY = "–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è üìÖ"
KEY_REG = "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚è±Ô∏è"
KEY_EXPORT = "–≠–∫—Å–ø–æ—Ä—Ç CSV üì§"
KEY_CLOSE = "‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KEY_WALK_START, KEY_WALK_END],
        [KEY_PEE, KEY_POO],
        [KEY_PEE_HOME, KEY_POO_HOME],
        [KEY_FEED],
        [KEY_DAY, KEY_REG],
        [KEY_EXPORT],
        [KEY_CLOSE],
    ],
    resize_keyboard=True,
)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def now_str() -> str:
    return dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def ensure_csv_headers(path: str):
    if not os.path.exists(path):
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "event", "user"])


def log_event(event_type: str, user: str):
    ensure_csv_headers(DB_PATH)
    with open(DB_PATH, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([now_str(), event_type, user])


def load_df() -> pd.DataFrame:
    if not os.path.exists(DB_PATH):
        return pd.DataFrame(columns=["timestamp", "event", "user"])
    df = pd.read_csv(DB_PATH)
    if df.empty:
        return pd.DataFrame(columns=["timestamp", "event", "user"])
    # —Ç–∏–ø—ã
    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    df = df.dropna(subset=["timestamp"])
    df["event"] = df["event"].astype(str)
    if "user" in df.columns:
        df["user"] = df["user"].astype(str)
    else:
        df["user"] = ""
    return df.sort_values("timestamp").reset_index(drop=True)


def pair_walks_today(df_today: pd.DataFrame) -> List[Tuple[pd.Timestamp, pd.Timestamp]]:
    """
    –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã (start,end) –∑–∞ –°–ï–ì–û–î–ù–Ø.
    –ë–µ—Ä—ë–º –ø–æ –ø–æ—Ä—è–¥–∫—É: –ø–µ—Ä–≤—ã–π 'start' —Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º 'end'.
    –ï—Å–ª–∏ –ø–∞—Ä –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –Ω–∞–∂–∞–ª–∏ ¬´–∑–∞–≤–µ—Ä—à–µ–Ω–∞¬ª) ‚Äî —Ö–≤–æ—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    """
    starts = df_today[df_today["event"] == KEY_WALK_START]["timestamp"].tolist()
    ends = df_today[df_today["event"] == KEY_WALK_END]["timestamp"].tolist()
    pairs = []
    i = j = 0
    while i < len(starts) and j < len(ends):
        if ends[j] > starts[i]:
            pairs.append((starts[i], ends[j]))
            i += 1
            j += 1
        else:
            # –µ—Å–ª–∏ end —Ä–∞–Ω—å—à–µ start ‚Äî —Å–¥–≤–∏–≥–∞–µ–º end (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤)
            j += 1
    return pairs


def format_times(series: pd.Series) -> str:
    if series.empty:
        return "‚Äî"
    return ", ".join(pd.to_datetime(series).dt.strftime("%H:%M").tolist())


def mean_and_sigma_minutes(times: List[dt.time]) -> Tuple[str, int, int]:
    """
    –ù–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ time (–±–µ–∑ –¥–∞—Ç—ã). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    (—Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_—Å—Ç—Ä–æ–∫–æ–π 'HH:MM', sigma_–º–∏–Ω—É—Ç, n)
    –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è œÉ (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∞ –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç –ø–æ–ª–Ω–æ—á—å; –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–∫).
    """
    if not times:
        return "‚Äî", 0, 0
    minutes = [t.hour * 60 + t.minute for t in times]
    avg = sum(minutes) / len(minutes)
    diffs2 = [(m - avg) ** 2 for m in minutes]
    sigma = int((sum(diffs2) / len(minutes)) ** 0.5)
    avg_h, avg_m = divmod(int(avg + 0.5), 60)
    return f"{avg_h:02d}:{avg_m:02d}", sigma, len(times)


# === –•–ï–ù–î–õ–ï–†–´ ===
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üê∂ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±–∞–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ. ¬´–ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è¬ª –ø–æ–∫–∞–∂–µ—Ç –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≥—É–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è,\n"
        "–∞ ¬´–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å¬ª –æ—Ü–µ–Ω–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ç—É–∞–ª–µ—Ç–∞ –∑–∞ 14 –¥–Ω–µ–π.",
        reply_markup=MAIN_KB,
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = (update.message.from_user.first_name or "").strip() or "user"
    text = (update.message.text or "").strip()

    # –≠–∫—Å–ø–æ—Ä—Ç
    if text == KEY_EXPORT:
        if os.path.exists(DB_PATH) and os.path.getsize(DB_PATH) > 0:
            await update.message.reply_document(open(DB_PATH, "rb"))
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –ó–∞–∫—Ä—ã—Ç—å
    if text == KEY_CLOSE:
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å.")
        return

    # –ì—Ä–∞—Ñ–∏–∫ –¥–Ω—è
    if text == KEY_DAY:
        df = load_df()
        if df.empty:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π üê∂")
            return
        today = pd.Timestamp.now().date()
        df_today = df[df["timestamp"].dt.date == today]

        if df_today.empty:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π üê∂")
            return

        # –ø–∞—Ä—ã –ø—Ä–æ–≥—É–ª–æ–∫
        pairs = pair_walks_today(df_today)
        total_minutes = 0
        for s, e in pairs:
            total_minutes += max(0, int((e - s).total_seconds() // 60))

        pee_times = df_today[df_today["event"] == KEY_PEE]["timestamp"]
        poo_times = df_today[df_today["event"] == KEY_POO]["timestamp"]
        feed_times = df_today[df_today["event"] == KEY_FEED]["timestamp"]
        home_incidents = df_today[df_today["event"].isin([KEY_PEE_HOME, KEY_POO_HOME])]

        msg = [
            f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')}):",
            f"‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏: {total_minutes} –º–∏–Ω ({len(pairs)} —à—Ç)",
            f"‚Ä¢ –õ—É–∂–∏: {format_times(pee_times)}",
            f"‚Ä¢ –ö—É—á–∫–∏: {format_times(poo_times)}",
            f"‚Ä¢ –ö–æ—Ä–º–ª–µ–Ω–∏—è: {format_times(feed_times)}",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: {len(home_incidents) if not home_incidents.empty else 0}",
        ]
        await update.message.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
    if text == KEY_REG:
        df = load_df()
        if df.empty:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        since = (pd.Timestamp.now() - pd.Timedelta(days=14)).date()
        df_14 = df[df["timestamp"].dt.date >= since]

        if df_14.empty:
            await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
            return

        # –≤—Ä–µ–º–µ–Ω–∞ –∫–∞–∫ time()
        pee_list = [t.time() for t in df_14[df_14["event"] == KEY_PEE]["timestamp"].tolist()]
        poo_list = [t.time() for t in df_14[df_14["event"] == KEY_POO]["timestamp"].tolist()]
        pee_home = df_14[df_14["event"] == KEY_PEE_HOME]
        poo_home = df_14[df_14["event"] == KEY_POO_HOME]

        pee_avg, pee_sigma, pee_n = mean_and_sigma_minutes(pee_list)
        poo_avg, poo_sigma, poo_n = mean_and_sigma_minutes(poo_list)

        msg = [
            "‚è±Ô∏è –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (14 –¥–Ω–µ–π)",
            "",
            f"‚Ä¢ –õ—É–∂–∏: —Å—Ä–µ–¥–Ω–µ–µ {pee_avg} ¬±{pee_sigma} –º–∏–Ω (n={pee_n})",
            f"‚Ä¢ –ö—É—á–∫–∏: —Å—Ä–µ–¥–Ω–µ–µ {poo_avg} ¬±{poo_sigma} –º–∏–Ω (n={poo_n})",
            f"‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–º–∞: –ª—É–∂–∏ {len(pee_home)}, –∫—É—á–∫–∏ {len(poo_home)}",
        ]
        await update.message.reply_text("\n".join(msg), reply_markup=MAIN_KB)
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    if text in {KEY_WALK_START, KEY_WALK_END, KEY_PEE, KEY_POO, KEY_PEE_HOME, KEY_POO_HOME, KEY_FEED}:
        log_event(text, user)
        await update.message.reply_text(f"‚úÖ {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=MAIN_KB)
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=MAIN_KB,
    )


def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (—Ç–æ–∫–µ–Ω –æ—Ç @BotFather).")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()
